tail(table(companies$founded_year), 10)
plot(table(companies$founded_year), type = "l")
companies = subset(companies, founded_year >= 2007 & founded_year != 2016, ) #remove all other years
companies = subset(companies, !is.na(founded_year), select = -c(homepage_url, category_list), ) # remove any NA's
summary(companies$founded_year)
summary(companies$market)
summary(companies$market)
plot(table(additions$year_str))
plot(table(acqui$acquired_year))
companies = subset(companies, founded_year >= 2007 & founded_year != 2016, ) #remove all other years
companies = subset(companies, !is.na(founded_year), select = -c(homepage_url, category_list), ) # remove any NA's
summary(companies$founded_year)
plot(table(companies$founded_year), type = "l")
write.csv(companies, file = '~/Desktop/TechCrunch Data/Clean Data/companies.csv')
create.dir("~/Desktop/TechCrunch Data/Clean Data")
getwd()
load("~/Downloads/year.RData")
View(year)
View(year)
install(pa)
install.packages("pa')
)
")"
')'
install.packages("pa")
library(pa)
load("~/Downloads/pa-data/pkg/data/jan.RData")
load("~/Downloads/pa-master/pkg/data/jan.RData")
data(jan)
view(jan)
View(jan)
br.single = brinson(x = jan, date.var = "date", cat.var = "sector", bench.weight = "benchmark", port)
br.single = brinson(x = jan, date.var = "date", cat.var = "sector", bench.weight = "benchmark", portfolio.weight = "portfolio", ret.var = "return")
View(br.single)
summary(br.single)
plot(br.single, var = "sector", type ="return")
plot(br.single, var = "sector", type ="exposure")
summary(br.single)
plot(br.single, var = "sector", type ="return")
plot(br.single, var = "sector", type ="exposure")
plot(br.single, var = "sector", type ="return")
unique(br.single(name))
unique(br.single.name
)
head()
head(br.single)
summary(jan)
names(jan)
jan = jan(c(-"barrid"))
jan = subset(jan, c(-"barrid"))
jan = subset(jan, -c("barrid"))
jan = subset(jan, -c(barrid))
jan = subset(jan, -barrid)
jan = subset(jan, select = -barrid)
load("~/Downloads/pa-master/pkg/data/jan.RData")
jan = subset(jan, select = -barrid, )
jan = subset(jan, select = -barrid,)
View(jan)
jan = subset(jan, select = -c(momentum, value, size, growth, cap.usd, yield, currency),)
jan = subset(jan, select = -c(country),)
subset(jan, portfolio >0, )
sum(jan$portfolio, by = sector)
aggregate(jan$portfolio, by=list(Sector = jan$sector), FUN=sum)
aggregate(c(jan$portfolio, jan$benchmark), by=list(Sector = jan$sector), FUN=sum)
aggregate(jan$benchmark, by=list(Sector = jan$sector), FUN=sum)
df = data.frame(aggregate(jan$benchmark, by=list(Sector = jan$sector), FUN=sum))
df
toadd = aggregate(jan$portfolio, by=list(Sector = jan$sector), FUN=sum)
toadd
toadd$x
df.y= toadd$x
df
df = cbind(df, toadd$x)
df
df$`toadd$x`- df$x
df = cbind(df, df$`toadd$x`- df$x)
df
df = df[ ,c(1,3,2,4)]
df
names(df)
names(df) = c("Sector, "Portfolio", "Benchmark", "Difference")
names(df) = c("Sector", "Portfolio", "Benchmark", "Difference")
df
newjan = jan
newjan$bxr = newjan$return*newjan$benchmark
newjan$pxr = newjan$return*newjan$portfolio
View(newjan)
aggregate(newjan$pxr, by(Sector=newjan$sector), FUN=sum)
aggregate(newjan$pxr, by=list(Sector=newjan$sector), FUN=sum)
newdf = aggregate(newjan$pxr, by=list(Sector=newjan$sector), FUN=sum)
newdf = cbind(newdf, aggregate(newjan$bxr, by=list(Sector=newjan$sector)$x, FUN=sum))
newdf = cbind(newdf, aggregate(newjan$bxr, by=list(Sector=newjan$sector), FUN=sum)$x)
newdf
names(newdf) = c("Sector", " Portfolio return", "Benchmark Return")
newdf
df = cbind(df, newdf$` Portfolio return`)
df = cbind(df, newdf$`Benchmark Return`)
df
returns = c(df$Portfolio*df$`newdf$` Portfolio return``, df$Benchmark*df$`newdf$`Benchmark Return``)
returns = c(df$Portfolio*df$`newdf$`Portfolio return``, df$Benchmark*df$`newdf$`Benchmark Return``)
names(df) = c("Sector", "PW", "BW", "Diff", "PR", "BR")
df
df$PW*df$PR
sum(df$PW*df$PR)
sum(df$BW*df$BR)
totalreturn = c(sum(df$PW*df$PR), sum(df$BW*df$BR))
totalreturn
df
aggregate(newjan$return*newjan$portfolio, by = list(Sector=newjan$sector), FUN=sum)
df
totalreturn
sum(df$BR)
sum(df$BR*df$BW)
totalreturn[2]
(df$PW-df$BW)*(df*BR-totalreturn[2])
df
(df$PW-df$BW)*(df$BR-totalreturn[2])
AllocationEffect = (df$PW-df$BW)*(df$BR-totalreturn[2])
df = cbind(df, AllocationEffect)
df
df$AllocationEffect = df$AllocationEffect*10000
df
df
sum(df$PW)
sum(df$BW)
portfolioreturn = aggregate(newjan$return, by= list(Sector = newjan$sector), FUN=sum)
portfolioreturn
benchmarkreturn = portfolioreturn
benchmarkreturn = benchmarkreturn$x
benchmarkreturn
df = cbind(df, benchmarkreturn)
df
AllocationEffect = (df$PW - df$BW)*(df$benchmarkreturn-totalreturn[2])
df
AllocationEffect
sum(df$benchmarkreturn)
AllocationEffect = (df$PW - df$BW)*(df$benchmarkreturn-sum(df$benchmarkreturn))
AllocationEffect
aggregate(newjan$return*newjan$benchmark, by = list(Sector = newjan$sector), FUN = sum)
aggregate(newjan$return*newjan$benchmark, by = list(Sector = newjan$sector), FUN = sum)$x*100
returnbenchmark = sum(aggregate(newjan$return*newjan$benchmark, by = list(Sector = newjan$sector), FUN = sum)$x)
returnbenchmark
AllocationEffect = (df$PW - df$BW)*(df$benchmarkreturn-returnbenchmark)
AllocationEffect
newdf = subset(df, select = -c(Sector, PW, BW, Diff),)
newdf
newdf = subset(df, select = c(Sector, PW, BW, Diff),)
newdf
benchmarkreturn = aggregate(newjan$return*newjan$benchmark, by = list(Sector = newjan$sector), FUN = sum)
benchmarkreturn
portfolioreturn = aggregate(newjan$return*newjan$portfolio, by = list(Sector = newjan$sector), FUN = sum)
portfolioreturn
totalbenchmarkreturn = sum(benchmarkreturn$x)
totalbenchmarkreturn
totalportfolioreturn = sum(portfolioreturn$x)
totalportfolioreturn
totalbenchmarkreturn- totalportfolioreturn
(newdf$PW-newdf$BW)*(benchmarkreturn$x-totalbenchmarkreturn)
AllocationEffect = (newdf$PW-newdf$BW)*(benchmarkreturn$x-totalbenchmarkreturn)
newdf = cbind(newdf, AllocationEffect)
newdf
benchmarkreturn
sum(benchmarkreturn$x)
sum(newjan$portfolio)
sum(newjan$benchmark)
sum(AllocationEffect)
sum(newdf$AllocationEffect)
View(Jan)
View(jan)
aggregate(jan$return*jan$portfolio, by = list(Sector = jan$sector), FUN= sum)
aggregate(jan$return, by = list(Sector = jan$sector), FUN= sum)
View(df)
aggregate(jan$portfolio, by = list(Sector = jan$sector), FUN= sum)
aggregate(jan$benchmark, by = list(Sector = jan$sector), FUN= sum)
SectorData = data.frame(aggregate(jan$portfolio, by = list(Sector = jan$sector), FUN= sum))
View(SectorData)
SectorData = cbind(SectorData, aggregate(jan$portfolio, by = list(Sector = jan$sector), FUN= sum)$x)
names(SectorData) = c("Sector", "PortfolioWeight", "BenchmarkWeight")
SectorData = cbind(SectorData, aggregate(jan$benchmarch, by = list(Sector = jan$sector), FUN= sum)$x)
SectorData = subset(SectorData, -c(BenchmarkWeight))
SectorData = subset(SectorData, -c(BenchmarkWeight), )
SectorData = subset(SectorData, select = -c(BenchmarkWeight), )
SectorData = cbind(SectorData, aggregate(jan$benchmark, by = list(Sector = jan$sector), FUN= sum)$x)
names(SectorData) = c("Sector", "PortfolioWeight", "BenchmarkWeight")
SectorData = cbind(SectorData, SectorData$PortfolioWeight-SectorData$BenchmarkWeight)
sum(SectorData$PortfolioWeight) == 1
sum(SectorData$BenchmarkWeight) == 1
BenchmarkReturns = aggregate(jan$return*jan$benchmark, by = list(Sector = jan$sector), FUN = sum)
PortfolioReturns = aggregate(jan$return*jan$portfolio, by = list(Sector = jan$sector), FUN = sum)
BenchmarkReturns
PortfolioReturns
PortfolioReturns - BenchmarkReturns
sum(PortfolioReturns) - sum(BenchmarkReturns)
sum(PortfolioReturns$x) - sum(BenchmarkReturns$x)
load("~/Downloads/pa-master/pkg/data/jan.RData")
SectorData = cbind(SectorData, PortfolioReturns$x, BenchmarkReturns$x)
plot(SectorData$`PortfolioReturns$x`, SectorData$`BenchmarkReturns$x`)
barplot(SectorData$`PortfolioReturns$x`, SectorData$`BenchmarkReturns$x`)
plot(SectorData$`PortfolioReturns$x`, SectorData$`BenchmarkReturns$x`, by=list(SectorData$Sector))
names(SectorData) = c("Sector", "PortfolioWeight", "BenchmarkWeight", "DifferenceWeight", "PortfolioReturn", "BenchmarkReturn")
warnings()
TotalBenchmarkReturn = sum(SectorData$BenchmarkReturn)
TotalBenchmarkReturn
View(acqui)
View(BenchmarkReturns)
sum(SectorData$PortfolioReturn)
TotalPortfolioReturn = sum(SectorData$PortfolioReturn)
TotalPortfolioReturn-TotalBenchmarkReturn
SectorData$BenchmarkReturn-TotalBenchmarkReturn
(SectorData$BenchmarkReturn-TotalBenchmarkReturn) * SectorData*DifferenceWeight
(SectorData$BenchmarkReturn-TotalBenchmarkReturn) * SectorData$DifferenceWeight
sum((SectorData$BenchmarkReturn-TotalBenchmarkReturn) * SectorData$DifferenceWeight)
SectorData$PortfolioWeight*SectorData$BenchmarkReturn - SectorData$BenchmarkWeight*SectorData$BenchmarkReturn
SectorData$DifferenceWeight*SectorData$BenchmarkReturn
SectorData$DifferenceWeight*SectorData$BenchmarkReturn*10000
SectorData$PortfolioReturn*100
SectorData$BenchmarkReturn*100
TotalPortfolioReturn-TotalBenchmarkReturn
ActiveReturn = TotalPortfolioReturn-TotalBenchmarkReturn
load("~/Downloads/pa-master/pkg/data/jan.RData")
View(jan)
#Creating a data frame aggregated by Sector
#Creating DF and adding portfolio weights
SectorData = data.frame(aggregate(jan$portfolio, by = list(Sector = jan$sector), FUN= sum))
#adding benchmark weights
SectorData = cbind(SectorData, aggregate(jan$benchmark, by = list(Sector = jan$sector), FUN= sum)$x)
#renaming columns
names(SectorData) = c("Sector", "PortfolioWeight", "BenchmarkWeight")
#finding difference in weights between both (Exposure)
SectorData = cbind(SectorData, SectorData$PortfolioWeight-SectorData$BenchmarkWeight)
#checking if weights = 1
sum(SectorData$PortfolioWeight) == 1
sum(SectorData$BenchmarkWeight) == 1
#aggregating Weighted returns for Sectors
BenchmarkReturns = aggregate(jan$return*jan$benchmark, by = list(Sector = jan$sector), FUN = sum)
PortfolioReturns = aggregate(jan$return*jan$portfolio, by = list(Sector = jan$sector), FUN = sum)
#finding active returns
sum(PortfolioReturns$x) - sum(BenchmarkReturns$x)
#adding both to data frame
SectorData = cbind(SectorData, PortfolioReturns$x, BenchmarkReturns$x)
#renaming columns
names(SectorData) = c("Sector", "PortfolioWeight", "BenchmarkWeight", "DifferenceWeight", "PortfolioReturn", "BenchmarkReturn")
TotalBenchmarkReturn = sum(SectorData$BenchmarkReturn)
TotalPortfolioReturn = sum(SectorData$PortfolioReturn)
ActiveReturn = TotalPortfolioReturn-TotalBenchmarkReturn
sum((SectorData$BenchmarkReturn-TotalBenchmarkReturn) * SectorData$DifferenceWeight)
summary(br.single)
SectorData$PortfolioWeight-sector
(SectorData$PortfolioWeight - SectorData$BenchmarkWeight)* SectorData$BenchmarkReturn
(SectorData$PortfolioWeight * SectorData$BenchmarkReturn) - (SectorData$BenchmarkWeight * SectorData$BenchmarkReturn)
data(jan)
br.single = brinson(x=  jan, date.var = "date", cat.var = "sector", bench.weight = "benchmark", portfolio.weight = "portfolio", ret.var = "return")
summary(br.single)
jan$portfolio*jan$return
sum(jan$portfolio*jan$return)
sum(jan$portfolio*jan$return) == sum(SectorData$PortfolioReturn)
sum(jan$portfolio*jan$return)
sum(SectorData$PortfolioReturn)
sum(jan$benchmark*jan$return)
sum(SectorData$benchmarkReturn)
sum(SectorData$BenchmarkReturn)
AllocationEffect = (SectorData$PortfolioWeight* SectorData$BenchmarkReturn) - (SectorData$BenchmarkWeight* SectorData$BenchmarkReturn)
AllocationEffect
AllocationEffect*10000
SelectionEffect = (SectorData$BenchmarkWeight* SectorData$PortfolioReturn) - (SectorData$BenchmarkWeight * SectorData$BenchmarkReturn)
SelectionEffect*10000
SectorData = cbind(SectorData, AllocationEffect, SelectionEffect)
ActiveSectorReturn = SectorData$PortfolioReturn - SectorData$BenchmarkReturn
ActiveSectorReturn
SectorData = cbind(SectorData, ActiveSectorReturn)
sum(ActiveSectorReturn)
SectorData = cbind(SectorData, InteractionEffect)
InteractionEffect = SectorData$ActiveSectorReturn - SectorData$AllocationEffect - SectorData$SelectionEffect
SectorData = cbind(SectorData, InteractionEffect)
subset(SectorData, select = c(Sector, AllocationEffect*100))
subset(SectorData, select = c(Sector, (AllocationEffect*100)))
SectorData$InteractionEffect = SectorData$InteractionEffect*10000
View(SectorData)
SectorData$PortfolioReturn = SectorData$PortfolioReturn*100
SectorData$BenchmarkReturn = SectorData$BenchmarkReturn*100
SectorData$AllocationEffect = SectorData$AllocationEffect*10000
SectorData$SelectionEffect = SectorData$SelectionEffect*10000
SectorData$ActiveSectorReturn = SectorData$ActiveSectorReturn*10000
SectorData = SectorData[, c(1,2,3,4,5,6,9,7,8,10)]
View(SectorData)
Total = c("Total", sum(SectorData$PortfolioWeight), sum(Sec)
)
Total = c("Total", sum(SectorData$PortfolioWeight), sum(SectorData$BenchmarkWeight), sum(SectorData$DifferenceWeight), sum(SectorData$PortfolioReturn), sum(SectorData$BenchmarkReturn), sum(SectorData$ActiveSectorReturn), sum(SectorData$AllocationEffect), sum(SectorData$SelectionEffect), sum(SectorData$InteractionEffect))
Total
SectorData = rbind(SectorData, Total)
sum(SectorData$AllocationEffect) + sum(SectorData$SelectionEffect) + sum(SectorData$InteractionEffect)
sum(sum(SectorData$AllocationEffect),sum(SectorData$SelectionEffect),sum(SectorData$InteractionEffect))
sum(SectorData$AllocationEffect)
#Creating DF and adding portfolio weights
SectorData = data.frame(aggregate(jan$portfolio, by = list(Sector = jan$sector), FUN= sum))
#adding benchmark weights
SectorData = cbind(SectorData, aggregate(jan$benchmark, by = list(Sector = jan$sector), FUN= sum)$x)
#renaming columns
names(SectorData) = c("Sector", "PortfolioWeight", "BenchmarkWeight")
#finding difference in weights between both (Exposure)
SectorData = cbind(SectorData, SectorData$PortfolioWeight-SectorData$BenchmarkWeight)
#checking if weights = 1
sum(SectorData$PortfolioWeight) == 1
sum(SectorData$BenchmarkWeight) == 1
#aggregating Weighted returns for Sectors
BenchmarkReturns = aggregate(jan$return*jan$benchmark, by = list(Sector = jan$sector), FUN = sum)
PortfolioReturns = aggregate(jan$return*jan$portfolio, by = list(Sector = jan$sector), FUN = sum)
#finding active returns
sum(PortfolioReturns$x) - sum(BenchmarkReturns$x)
#adding both to data frame
SectorData = cbind(SectorData, PortfolioReturns$x, BenchmarkReturns$x)
#renaming columns
names(SectorData) = c("Sector", "PortfolioWeight", "BenchmarkWeight", "DifferenceWeight", "PortfolioReturn", "BenchmarkReturn")
TotalBenchmarkReturn = sum(SectorData$BenchmarkReturn)
TotalPortfolioReturn = sum(SectorData$PortfolioReturn)
ActiveReturn = TotalPortfolioReturn-TotalBenchmarkReturn
sum((SectorData$BenchmarkReturn-TotalBenchmarkReturn) * SectorData$DifferenceWeight)
AllocationEffect = (SectorData$PortfolioWeight * SectorData$BenchmarkReturn) - (SectorData$BenchmarkWeight * SectorData$BenchmarkReturn)
SelectionEffect = (SectorData$BenchmarkWeight * SectorData$PortfolioReturn) - (SectorData$BenchmarkWeight * SectorData$BenchmarkReturn)
SectorData = cbind(SectorData, AllocationEffect, SelectionEffect)
ActiveSectorReturn = SectorData$PortfolioReturn - SectorData$BenchmarkReturn
SectorData = cbind(SectorData, ActiveSectorReturn)
InteractionEffect = SectorData$ActiveSectorReturn - SectorData$AllocationEffect - SectorData$SelectionEffect
SectorData = cbind(SectorData, InteractionEffect)
SectorData$PortfolioReturn = SectorData$PortfolioReturn*100
SectorData$BenchmarkReturn = SectorData$BenchmarkReturn*100
SectorData$InteractionEffect = SectorData$InteractionEffect*10000
SectorData$AllocationEffect = SectorData$AllocationEffect*10000
SectorData$SelectionEffect = SectorData$SelectionEffect*10000
SectorData$ActiveSectorReturn = SectorData$ActiveSectorReturn*10000
SectorData = SectorData[, c(1,2,3,4,5,6,9,7,8,10)]
sum(SectorData$AllocationEffect) + sum(SectorData$SelectionEffect) + sum(SectorData$InteractionEffect)
sum(SectorData$ActiveSectorReturn)
barplot(SectorData$PortfolioReturn, SectorData$BenchmarkReturn)
barplot(SectorData$PortfolioReturn, SectorData$BenchmarkReturn)
plot(SectorData$PortfolioReturn, SectorData$BenchmarkReturn, type = "h")
load("~/Downloads/pa-master/pkg/data/quarter.RData")
data("quarter")
br.multi = brinson(quarter, date.var = "date", cat.var = "sector", bench.weight = "benchmark", portfolio.weight = "portfolio", ret.var = "return")
summary(br.multi)
plot(br.multi, typle = "return")
plot(br.multi, type = "return")
br.multi = brinson(year, date.var = "date", cat.var = "sector", bench.weight = "benchmark", portfolio.weight = "portfolio", ret.var = "return")
summary(br.multi)
plot(br.multi, type = "return")
sum(SectorData$AllocationEffect) + sum(SectorData$SelectionEffect) + sum(SectorData$InteractionEffect)
sum(SectorData$AllocationEffect)
sum(SectorData$SelectionEffect)
sum(SectorData$InteractionEffect)
summary(br.single)
#############
WeightOfBenchmark = aggregate(jan$benchmark, by = list(Sector = jan$sector), FUN =sum)
WeightOfBenchmark
AllocationEffect = (SectorData$PortfolioWeight * (SectorData$BenchmarkReturn/WeightOfBenchmark)) - (SectorData$BenchmarkReturn)
AllocationEffect = (SectorData$PortfolioWeight * (SectorData$BenchmarkReturn/WeightOfBenchmark$x)) - (SectorData$BenchmarkReturn)
AllocationEffect
AllocationEffect*100
sum(AllocationEffect*100)
SelectionEffect = (SectorData$BenchmarkWeight * (SectorData$PortfolioRetur/WeightOfPortfolio$x)) - (SectorData$BenchmarkReturn)
WeightOfPortfolio = aggregate(jan$portfolio, by = list(Sector = jan$sector), FUN =sum)
SelectionEffect = (SectorData$BenchmarkWeight * (SectorData$PortfolioRetur/WeightOfPortfolio$x)) - (SectorData$BenchmarkReturn)
AllocationEffect = (SectorData$PortfolioWeight * (SectorData$BenchmarkReturn/WeightOfBenchmark$x)) - (SectorData$BenchmarkReturn)*100
SelectionEffect = (SectorData$BenchmarkWeight * (SectorData$PortfolioRetur/WeightOfPortfolio$x)) - (SectorData$BenchmarkReturn)*100
SectorData = cbind(SectorData, AllocationEffect, SelectionEffect)
AllocationEffect = (SectorData$PortfolioWeight * (SectorData$BenchmarkReturn/WeightOfBenchmark$x)) - (SectorData$BenchmarkReturn)
SelectionEffect = (SectorData$BenchmarkWeight * (SectorData$PortfolioRetur/WeightOfPortfolio$x)) - (SectorData$BenchmarkReturn)
SectorData = cbind(SectorData, AllocationEffect, SelectionEffect)
SectorData = subset(SectorData, select = -c(AllocationEffect, SelectionEffect))
SectorData = subset(SectorData, select = -c(AllocationEffect, SelectionEffect))
SectorData = subset(SectorData, select = -c(AllocationEffect.1, SelectionEffect.1))
SectorData = subset(SectorData, select = -c(InteractionEffect, ActiveSectorReturn))
View(additions)
View(acqui)
View(acqui)
shiny::runApp('Desktop/Stat 159/GITHUB LINK/lab8')
runApp('Desktop/Stat 159/GITHUB LINK/lab8')
runApp('Desktop/Stat 159/GITHUB LINK/lab8')
shiny::runApp('Desktop/stat159-fall2016-project3/shinyApp')
wd
shiny::runApp()
runApp()
runApp()
dummy = as.list(dummy)
runApp()
scaled_schools <- read.csv("../data/scaled-schools.csv", header=TRUE)
features <- c("MN_EARN_WNE_MALE0_P6", "ADM_RATE",
"SATMTMID", "STEM_DEG_WOMEN", "COUNT_WNE_MALE0_P6",
"WOMENONLY", "HIGHDEG4")
regression_data <- scaled_schools[, features]
View(regression_data)
runApp()
regression_data[MN_EARN_WNE_MALE0_P6]
regression_data[dummy]
dummy =  "SATMTMID"
View(regression_data[dummy])
View(regression_data[MN_EARN_WNE_MALE0_P6])
View(regression_data$MN_EARN_WNE_MALE0_P6)
View(regression_data[MN_EARN_WNE_MALE0_P6])
View(regression_data[,MN_EARN_WNE_MALE0_P6])
View(regression_data[,'MN_EARN_WNE_MALE0_P6'])
View(regression_data['MN_EARN_WNE_MALE0_P6'])
runApp()
print(dummy)
'MN_EARN_WNE_MALE0_P6'
regression_data['MN_EARN_WNE_MALE0_P6']
regression_data[dummy]
plot(regression_data[dummy],regression_data['MN_EARN_WNE_MALE0_P6'])
plot(regression_data[dummy],regression_data['MN_EARN_WNE_MALE0_P6'], type = "p")
smoothScatter(regression_data[dummy],regression_data['MN_EARN_WNE_MALE0_P6'], type = "p")
points(regression_data[dummy],regression_data['MN_EARN_WNE_MALE0_P6'])
plot(regression_data[dummy],regression_data['MN_EARN_WNE_MALE0_P6'], type = "p")
plot(regression_data[dummy],regression_data['MN_EARN_WNE_MALE0_P6'])
plot(regression_data[dummy])
plot(regression_data[dummy],regression_data['MN_EARN_WNE_MALE0_P6'])
plot(x = regression_data[dummy],y = regression_data['MN_EARN_WNE_MALE0_P6'])
plot(x = regression_data[dummy], y = regression_data['MN_EARN_WNE_MALE0_P6'])
plot(x = regression_data[dummy], y = regression_data['MN_EARN_WNE_MALE0_P6'])
regression_data['MN_EARN_WNE_MALE0_P6']
regression_data[dummy]
regression_data['MN_EARN_WNE_MALE0_P6']
runApp()
runApp()
runApp()
library(car)
install.packages(car)
install.packages("car")
library(car)
scatterplot(regression_data[dummy], regression_data['MN_EARN_WNE_MALE0_P6'])
scatterplot(regression_data[[dummy]], regression_data[['MN_EARN_WNE_MALE0_P6']])
runApp()
plot(regression_data[[dummy]], regression_data[['MN_EARN_WNE_MALE0_P6']])
runApp()
abline(lm(MN_EARN_WNE_MALE0_P6 ~ paste0(dummy), data = regression_data))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
load("~/Desktop/stat159-fall2016-project3/data/ordered-schools.RData")
View(ordered_schools)
source("../data/ordered-schools.RData")
load("../data/ordered-schools.RData")
plot(ordered_schools$SCORE)
plot(head(ordered_schools$SCORE,50))
runApp()
runApp()
library(ggplot2)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ordered_schools$SCORE
as.numeric(ordered_schools$SCORE)
as.integer(ordered_schools$SCORE)
runApp()
ggplot(regression_data, aes(dummy, MN_EARN_WNE_MALE0_P6)) + geom_point()
ggplot(regression_data, aes(dummy, MN_EARN_WNE_MALE0_P6)) + geom_point()
ggplot(aes(regression_data[[dummy]], regression_data[['MN_EARN_WNE_MALE0_P6']])) + geom_point()
ggplot(regression_data, aes(dummy, 'MN_EARN_WNE_MALE0_P6')) + geom_point()
ggplot(regression_data, aes(dummy, MN_EARN_WNE_MALE0_P6)) + geom_point()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
sink("./../../session-info.txt", append = TRUE)
shiny::runApp()
---
title: "Project 3 Slides"
shiny::runApp()
